// <auto-generated />
using System;
using API.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240305071103_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.1");

            modelBuilder.Entity("API.Customer.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DisabledAt")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("LastChange")
                        .HasColumnType("BLOB");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("ParamJsonClient")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("API.Customer.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<int>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DisabledAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Header")
                        .HasColumnType("TEXT");

                    b.Property<long?>("Hp")
                        .HasColumnType("INTEGER");

                    b.Property<short?>("IdType")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("LastChange")
                        .HasColumnType("BLOB");

                    b.Property<short>("MessageOption")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<short?>("P43_01_ByShifts")
                        .HasColumnType("INTEGER");

                    b.Property<short?>("P43_Semel_Work_Item")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ParamJsonComp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tel")
                        .HasColumnType("TEXT");

                    b.Property<long?>("TikNikuiim")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("API.Customer.Emp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdditionalTel")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Alia")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ApartmentNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<long?>("CityKod")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Dept")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DisabledAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<long>("EmpNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstNameEng")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<short?>("HaverKibutz")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HealthOrganization")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HouseNo")
                        .HasColumnType("TEXT");

                    b.Property<long>("IdNum")
                        .HasColumnType("INTEGER");

                    b.Property<short?>("IsIsraelCitizen")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("LastChange")
                        .HasColumnType("BLOB");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastNameEng")
                        .HasColumnType("TEXT");

                    b.Property<long?>("MailOfficeBox")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MaritalStatus")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tel")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ZipCode")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Emps");
                });

            modelBuilder.Entity("API.Customer.Paycheck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CompanyMifalDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CompanyOvedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Data")
                        .HasColumnType("TEXT");

                    b.Property<int>("EmpId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ExternalType")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("LastChange")
                        .HasColumnType("BLOB");

                    b.Property<short>("Month")
                        .HasColumnType("INTEGER");

                    b.Property<long>("OvedId")
                        .HasColumnType("INTEGER");

                    b.Property<short>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EmpId");

                    b.ToTable("Paychecks");
                });

            modelBuilder.Entity("API.Customer.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DisabledAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<long>("IdNum")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("LastChange")
                        .HasColumnType("BLOB");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Leda")
                        .HasColumnType("TEXT");

                    b.Property<long>("OvedId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tel")
                        .HasColumnType("TEXT");

                    b.Property<string>("VerificationCode")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("API.Customer.UserLogin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LoginTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("API.Customer.Company", b =>
                {
                    b.HasOne("API.Customer.Client", "Client")
                        .WithMany("Companies")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("API.Customer.Emp", b =>
                {
                    b.HasOne("API.Customer.User", "User")
                        .WithMany("Emps")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Customer.Paycheck", b =>
                {
                    b.HasOne("API.Customer.Emp", "Employee")
                        .WithMany("Paychecks")
                        .HasForeignKey("EmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("API.Customer.User", b =>
                {
                    b.HasOne("API.Customer.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("API.Customer.UserLogin", b =>
                {
                    b.HasOne("API.Customer.User", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Customer.Client", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("API.Customer.Company", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("API.Customer.Emp", b =>
                {
                    b.Navigation("Paychecks");
                });

            modelBuilder.Entity("API.Customer.User", b =>
                {
                    b.Navigation("Emps");

                    b.Navigation("Logins");
                });
#pragma warning restore 612, 618
        }
    }
}
